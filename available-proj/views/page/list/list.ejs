<h1>작업 항목 확인</h1>

<div style="text-align: right; margin-bottom: 35px;">
    <%if(sender == "order") {%>
    <!-- <a href="javascript:changeSchedule()"
            style="padding: 10px 16px; background-color: #449644; color: white; text-decoration: none; border-radius: 4px;">일자 적용하기</a> -->
    <%}%> 
    <%if(sender != "work"){%>
        <a href="<%=_props.CORES.sender[sender]%>/write"
            style="padding: 10px 16px; background-color: #007bff; color: white; text-decoration: none; border-radius: 4px;">작성하기</a>
    <%}%>
    <%if(sender == "broker") {%>
        <a href="javascript:changePrice()"
            style="padding: 10px 16px; background-color: #000000; color: white; text-decoration: none; border-radius: 4px;">단가
            적용하기</a>
        <a href="javascript:sumPrice()"
            style="padding: 10px 16px; background-color: #7c85ff; color: white; text-decoration: none; border-radius: 4px;">단가
            계산하기</a>
    <%}%>
</div>
<table>
    <thead>
        <tr>
            <th class="order_count" >번호</th>
            <%if(sender == "broker") {%>
            <th class="order_count" ><input type="checkbox" id="allCheked" class="checkBoxBig" /></th>
            <%}%>
            <th>Best</th>
            <th>At Least</th>
            <th class="task-name">작업명</th>
            <th class="deliverable">산출물</th>
            <th>작업 상태</th>
            <%if(sender == "broker") {%>
                <th>주문자 단가</th>
                <th>작업자 단가</th>
                <th>단가 노출 여부</th>
                <th>삭제</th>
            <%} else if(sender == "work") {%>
                <th>단가</th>
            <%}%>
        </tr>
    </thead>
    <tbody id="taskTableBody"></tbody>
</table>

<%- include("./view.ejs") %>

<script>
    var contentData = {};
    var priceObj = {};
    var selectOrder = 0;
    var scheduleData = {};
    var checkData = [];

    $(document).ready(function () {
        reloadTableBody();

        $("#allCheked").on("click", function() {
            let trHtmls = $("#taskTableBody").find("tr");
            if($(this).is(":checked")) {
                for(let trHtml of trHtmls) {
                    if($(trHtml).find("input[name='priceShow']").is(":checked")) {
                        let order_idx = $(trHtml).data("order_idx")
                        if(!checkData.includes(order_idx)) {
                            checkData.push(order_idx)
                        }
                        $(trHtml).find("input[name='check']").prop("checked", true);
                    }
                }
            } else {
                checkData = [];

                for(let trHtml of trHtmls) {
                    $(trHtml).find("input[name='check']").prop("checked", false);
                }
            }
        })
    });

    function reloadTableBody() {
        $("#taskTableBody").load("<%=_props.CORES.sender[sender]%>/listTable");
    }

    function changePriceObj(tr) {
        let order_idx = $(tr).data("order_idx");
        let order_price = $(tr).find("input[name='order_price']").val();
        let work_price = $(tr).find("input[name='work_price']").val();
        let priceShow = $(tr).find("input[name='priceShow']").is(":checked");

        let params = {
            order_idx: order_idx,
            order_price: order_price,
            work_price: work_price,
            price_show: (priceShow ? "Y" : "N"),
        }

        priceObj["order_" + order_idx] = params;
    };

    $(document).on("input", ".price_data", function () {
        let tr = $(this).parent().parent();
        let price = Number($(this).val().replace(/[^0-9]/g, ""));
        $(this).val(price.toLocaleString("ko-KR"));

        changePriceObj(tr);
    })

    $(document).on("change", "input[name='priceShow']", function () {
        let tr = $(this).parent().parent();
        changePriceObj(tr);
    })

    async function changePrice() {
        await senderAxios.callAxios("<%=_props.CORES.sender[sender]%>/changePrice", "post", { priceObj: JSON.stringify(priceObj)})
            .then(() => {
                alert("단가 내용이 적용되었습니다.");
                priceObj = {};
            });
    }

    $(document).on("change", ".status", async function () {
        let status = $(this).val();
        let order_idx = $(this).parent().parent().data("order_idx")
        <% if(sender == "order" || sender == "broker") { %>
            if (status == "03" || status == "05") {
                $(this).css("background-color", "#ee293b");
                $(this).css("color", "#ffffff");
                $(this).css("font-weight", "");
            }
            else if(status == "04") {
                $(this).css("background-color", "#ededed");
                $(this).css("color", "#767676");
                $(this).css("font-weight", "normal");
            }
            else {
                $(this).css("background-color", "");
                $(this).css("color", "");
                $(this).css("font-weight", "");
            }
        <% } else { %>
            if (status == "01" || status == "02" || status == "06") {
                $(this).css("background-color", "#ee293b");
                $(this).css("color", "#ffffff");
                $(this).css("font-weight", "");
            }
            else if(status == "04") {
                $(this).css("background-color", "#ededed");
                $(this).css("color", "#767676");
                $(this).css("font-weight", "normal");
            }
            else {
                $(this).css("background-color", "");
                $(this).css("color", "");
                $(this).css("font-weight", "");
            }
        <% } %>

        let params = {
            status: status,
            order_idx: order_idx
        }

        await senderAxios.callAxios("<%=_props.CORES.sender[sender]%>/changeStatus", "post", params)
            .then((data) => {
                contentData[order_idx].status = status;
            })
            ;
    })

    $(document).on("click", "button[name='orderDel']", async function () {
        const tr = $(this).parent().parent();
        if (confirm("해당 주문을 정말 삭제하시겠습니까?")) {
            const order_idx = $(tr).data("order_idx");
            const params = {
                order_idx: order_idx,
            }

            await senderAxios.callAxios("<%=_props.CORES.sender[sender]%>/delOrder", "post", params)
                .then((data) => {
                    $(tr).remove();
                });
        }
    })

    // async function changeSchedule() {
    //     await senderAxios.callAxios("<%=_props.CORES.sender[sender]%>/changeSchedule", "post", {scheduleData : JSON.stringify(scheduleData)})
    //         .then((data) => {
    //             alert("변경되었습니다.");
    //             scheduleData = {};
    //             // $(tr).remove();
    //         });
    // }

    $(document).on("click", "input[name='check']", function() {
        let order_idx = $(this).parent().parent().data("order_idx");

        if($(this).is(":checked")) {
            checkData.push(order_idx);
        } else {
            let checkDataIdx = checkData.indexOf(order_idx);
            if(checkDataIdx > -1) {
                checkData.splice(checkDataIdx, 1);
            }
        }
    })

    function sumPrice() {
        let checkDataJson = JSON.stringify(checkData);
        window.open("<%=_props.CORES.sender[sender]%>/sumPricePopup?checked=" + checkDataJson, "단가 계산하기", "width=700px,height=500px")
    }
</script>